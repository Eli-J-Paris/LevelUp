// <auto-generated />
using System;
using LevelUp.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LevelUp.Migrations
{
    [DbContext(typeof(LevelUpContext))]
    [Migration("20230920203603_DbReset")]
    partial class DbReset
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LevelUp.Models.DailyTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AttributeReward")
                        .HasColumnType("integer")
                        .HasColumnName("attribute_reward");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("Difficulty")
                        .HasColumnType("integer")
                        .HasColumnName("difficulty");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_completed");

                    b.Property<int>("Streak")
                        .HasColumnType("integer")
                        .HasColumnName("streak");

                    b.Property<string>("TaskType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("task_type");

                    b.Property<DateTime?>("TimeCompleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("time_completed");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("time_created");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int>("XpReward")
                        .HasColumnType("integer")
                        .HasColumnName("xp_reward");

                    b.HasKey("Id")
                        .HasName("pk_daily_tasks");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_daily_tasks_user_id");

                    b.ToTable("daily_tasks", (string)null);
                });

            modelBuilder.Entity("LevelUp.Models.ToDoTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AttributeReward")
                        .HasColumnType("integer")
                        .HasColumnName("attribute_reward");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("Difficulty")
                        .HasColumnType("integer")
                        .HasColumnName("difficulty");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_completed");

                    b.Property<string>("TaskType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("task_type");

                    b.Property<DateTime?>("TimeCompleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("time_completed");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("time_created");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int>("XpReward")
                        .HasColumnType("integer")
                        .HasColumnName("xp_reward");

                    b.HasKey("Id")
                        .HasName("pk_to_do_task");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_to_do_task_user_id");

                    b.ToTable("to_do_task", (string)null);
                });

            modelBuilder.Entity("LevelUp.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("HabitBuilding")
                        .HasColumnType("integer")
                        .HasColumnName("habit_building");

                    b.Property<int>("Hygiene")
                        .HasColumnType("integer")
                        .HasColumnName("hygiene");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<int>("Mindfullness")
                        .HasColumnType("integer")
                        .HasColumnName("mindfullness");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<int>("Productivity")
                        .HasColumnType("integer")
                        .HasColumnName("productivity");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.Property<int>("Wellness")
                        .HasColumnType("integer")
                        .HasColumnName("wellness");

                    b.Property<int>("Xp")
                        .HasColumnType("integer")
                        .HasColumnName("xp");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("LevelUp.Models.WeeklyTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AttributeReward")
                        .HasColumnType("integer")
                        .HasColumnName("attribute_reward");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("Difficulty")
                        .HasColumnType("integer")
                        .HasColumnName("difficulty");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_completed");

                    b.Property<int>("Streak")
                        .HasColumnType("integer")
                        .HasColumnName("streak");

                    b.Property<string>("TaskType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("task_type");

                    b.Property<DateTime?>("TimeCompleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("time_completed");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("time_created");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int>("XpReward")
                        .HasColumnType("integer")
                        .HasColumnName("xp_reward");

                    b.HasKey("Id")
                        .HasName("pk_weekly_task");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_weekly_task_user_id");

                    b.ToTable("weekly_task", (string)null);
                });

            modelBuilder.Entity("LevelUp.Models.DailyTask", b =>
                {
                    b.HasOne("LevelUp.Models.User", "User")
                        .WithMany("DailyTasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_daily_tasks_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LevelUp.Models.ToDoTask", b =>
                {
                    b.HasOne("LevelUp.Models.User", "User")
                        .WithMany("ToDoTasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_to_do_task_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LevelUp.Models.WeeklyTask", b =>
                {
                    b.HasOne("LevelUp.Models.User", "User")
                        .WithMany("WeeklyTasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_weekly_task_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LevelUp.Models.User", b =>
                {
                    b.Navigation("DailyTasks");

                    b.Navigation("ToDoTasks");

                    b.Navigation("WeeklyTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
